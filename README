tyserv-2.3 -- database server which use typhoon RDBMS as database engine
Copyright (C) 2003  Masahiko Ito

These programs is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

These programs is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with these programs; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

Mail suggestions and bug reports for these programs to
m-ito@mbox.kyoto-inet.or.jp

紹介
====

tyserv はUNIX系OSで利用することを念頭に開発しているデータベースマネー
ジャです。tyserv はその基本エンジン部分に Typhoon Relational Database
Management System v1.11.0 を使用しています。tyserv の提供する主な機能
は以下のものです。

 1. ソケットインターフェースを利用したネットワーク越しのアクセス機能
 2. 障害に備えたジャーナルファイル(ロールバック、リカバリ)取得機能
 3. 排他制御機能
 4. トランザクション機能
     □ ロールバック(ロールバックジャーナルによる)
     □ コミット
 5. DB復旧機能(リカバリジャーナルによる)
 6. IPアドレスによるアクセス制限機能(/etc/hosts.allow, /etc/
    hosts.denyによる)
 7. ユーザ認証によるアクセス制限機能(/home/tyserv/tyserv/etc/passwdに
    よる)

また、専用掲示板(http://myh.no-ip.org/~tyserv/cgi-bin/bbs.cgi)を用意し
ましたので、こちらのほうもご利用ください。

作者の思い(^^;
==============

現時点で既に「Apache + PHP + PostgreSQL」みたいな、かゆいところに手の
届く気持良く便利な「まごの手」があるのになぜあえてこのような物を作っ
てるのか？...。

「まごの手」は確かに便利な物なんですが、たまには「直接手で」掻きむし
るあの感覚も忘れたくない、そんな事ってないですか？、いやあって欲し
い...。

という訳で、いまだに「COBOL + VSAM(or VSAS)索引順編成」、「 C +
C-ISAM」等の言葉に反応してしまうそこのあなたにこそ「tyserv」は有るの
です。あっ、でもそれ以外の人もつかってね...。

ダウンロード
============

http://myh.no-ip.org/~tyserv/tyserv-2.3.tar.gz

  1. リカバリジャーナルのスワップ機能を追加.
  2. tyserv.plにty_shutdown(),ty_swaprvj()を追加.
  3. COMMIT,END_TRAN時のリカバリジャーナル出力件数制限チェック洩れ修正
  4. open-cobolからのアクセスサンプルプログラムを追加
  5. tyrecover.shのデフォルトの動作を最終のcommit又はend_tran実行時まで
     データ復旧するように修正した

インストール
============

 1. システムにユーザ tyserv を追加する
 2. ユーザ tyserv 用にホームディレクトリ /home/tyserv を作成する
 3. tyserv でログインする
 4. tyserv-2.3 を展開する
     □ $ tar xvzf tyserv-2.3.tar.gz
     □ $ cp -fr tyserv-2.3/typhoon ~/
     □ $ cp -fr tyserv-2.3/tyserv ~/
     □ $ cp -fr tyserv-2.3/rundir1 ~/
 5. PATH に ${HOME}/typhoon/bin, ${HOME}/tyserv/bin を追加する
        ex. (/home/tyserv/.profile etc)
     □ PATH="${PATH}:${HOME}/typhoon/bin"
     □ PATH="${PATH}:${HOME}/tyserv/bin"
     □ export PATH
 6. ユーザ tyserv で再度ログインする(上記の設定を有効にする)
 7. typhoon-1.11.0 をインストールする
     □ typhoon-1.11.0.tar.gz を取得する
        http://users.footprints.net/~kaz/typhoon.html
     □ $ tar xvzf typhoon-1.11.0.tar.gz
     □ $ cd typhoon-1.11.0; patch -p1 <../tyserv-2.3/
        typhoon-1.11.0.patch
     □ $ ./configure; make
     □ $ su
        # make install; exit
 8. データベース定義ファイル(typhoondb.ddl)からデータベース定義
    (typhoondb.dbd)を生成する。この定義にはサンプルのテーブル
    (smp1,smp2) の定義が含まれる。
     □ $ dbdgen typhoondb
 9. インポートコマンドファイル、エクスポートコマンドファイルを作成す
    る
     □ $ cd /home/tyserv/typhoon/dbd
     □ $ tyimport -g typhoondb
     □ $ cp typhoondb.imp typhoondb.smp1.imp
     □ $ vi typhoondb.smp1.imp <-- テーブル smp1 のimport命令部分だ
        け残す
     □ $ tyexport -g typhoondb
     □ $ cp typhoondb.exp typhoondb.smp1.exp
     □ $ vi typhoondb.smp1.exp <-- テーブル smp1 のexport命令部分だ
        け残す
     □ 同様に typhoondb.smp2.imp, typhoondb.smp2.exp も作成して下さ
        い
10. データベースサーバ本体の tyserv を生成する(あらかじめ libwrap を
    インストールしておいて下さい)
     □ $ cd /home/tyserv/tyserv/src
     □ $ make src
     □ $ make
     □ $ make install
11. 起動スクリプト rc.tyserv を適切なディレクトリへコピーする
     □ $ su
     □ # cp /home/tyserv/tyserv/etc/rc.tyserv /etc/rc.d/
12. ブート時に起動スクリプトが動くように設定する
      ex. (/etc/rc.d/rc.local etc)
          if [ -x /etc/rc.d/rc.tyserv ]; then
              . /etc/rc.d/rc.tyserv -d /home/tyserv/rundir1
          fi
      
13. 必要に応じてコンフィグファイル /home/tyserv/rundir1/conf/
    tyserv.conf を編集する
14. システムをリブートする
15. ユーザ tyserv でログインする
16. サンプルスクリプトを動かして動作確認を行う(perl版)
     □ $ cd /home/tyserv/tyserv/sample/perl
     □ $ ./sample1.pl localhost 20000
     □ $ ./sample2.pl localhost 20000
17. サンプルスクリプトを動かして動作確認を行う(open-cobol版)
     □ $ cd /home/tyserv/tyserv/sample/open-cobol
     □ $ make
     □ $ ./sample1
18. 本番運用に備えて
     □ /home/tyserv/tyserv/etc/passwd ファイルを編集し、
       
        ユーザ:パスワード:アクセス権限(*)
       
        を設定する。特に、デフォルトのパスワードは必ず変えて下さい。
        chmod 600 /home/tyserv/tyserv/etc/passwd を実行する。
       
        (*) アクセス権限
         ☆ all : データベースの参照、更新、SHUTDOWN、SWAPRVJ ができる。
         ☆ full : データベースの参照、更新ができる。
         ☆ get : データベースの参照ができる。
     □ /etc/hosts.allow, /etc/hosts.deny を適切に設定する

コンフィグファイル(/home/tyserv/rundir1/conf/tyserv.conf)のパラメータ
=====================================================================

 ・ HOST_NAME=localhost
    tyservの稼働するホスト名の指定
    (適切に設定する)
 ・ DAEMON_NAME=tyserv
    /etc/hosts.allow,/etc/hosts.deny に記述するデーモン名の指定
    (特に変える必要は無いでしょう)
 ・ SOCKET_PORT=20000
    tyservに接続するためのポート番号の指定
    (適切に設定する)
 ・ SOCKET_WAIT_QUEUE=128
    SOCKET_PORTに対するバックログの指定
    (特に変える必要は無いでしょう)
 ・ TYPHOON_DIR=/home/tyserv/typhoon
    typhoon 用ディレクトリの指定
    (事実上固定値です(^^;)
 ・ TYSERV_DIR=/home/tyserv/tyserv
    tyserv 用ディレクトリの指定
    (事実上固定値です(^^;)
 ・ RVJ_SW=1
    リカバリジャーナルの設定(1:取得する 1以外:取得しない)
    通常は「1」が望ましいが、データの復旧はバックアップを戻すだけで十
    分と割り切れるなら、速度重視で「0」でも良いかなぁ...
 ・ SAFER_SW=1
    安全モードの設定(1:設定する 1以外:設定しない)
     □ 安全モード設定時
        ジャーナル出力を syncモード で実行
        更新スピードは遅くなるが、ジャーナル記録の確実性が高い
     □ 安全モード非設定時
        ジャーナル出力を 非syncモード で実行
        ジャーナル記録の確実性は低いが、更新スピードが速い
        UPS等の利用が望ましい
    通常は「1」が望ましいが、UPSが利用できたり、ノートパソコンで稼働
    させたりで、不意の電源断等が回避できている状況なら「0」でいいかも。
 ・ RBJ_MAX=10000
    １回のトランザクションでのロールバックジャーナル出力件数の最大値
    を指定する。ロールバックジャーナル出力件数がこの指定件数を越える
    とそれ以降の更新処理は COMMIT,ROLLBACK,END_TRAN,ABORT_TRAN が実行
    されるまで失敗する。
 ・ RVJ_MAX=1000000
    サーバ起動中のリカバリジャーナル出力件数の最大値を指定する。
    リカバリジャーナル出力件数がこの指定件数を越えるとそれ以降の更新
    処理はサーバを再起動するまで失敗する。また、ロールバック処理中に
    リカバリジャーナル出力件数がこの指定件数を越えるとサーバはロール
    バックを放棄してクラッシュする。
    RVJ_MAX は RBJ_MAX に比べて十分大きな値にすることが望ましい。

    RVJ_MAX, RBJ_MAX は設計ミス、バグ等によりジャーナルがディスク領域
    を食い潰す事を回避するために導入したパラメータです。
 ・ DEBUG=0
    デバッグモード(1:設定する 1以外:設定しない)
    (特に変える必要は無いでしょう)

tyserv へのアクセス方法
=======================

tyserv の開いているソケットポートにコマンドを書き込んで、同一ポートか
ら結果を読み取ることでアクセスを行います。よって、ソケット通信をサポ
ートする全ての言語から tyserv へのアクセスを行うことが出来るはずです
。簡単な話し telnet でアクセス出来ます(実用的かは別にして(^^;)。

また、perl用のアクセスライブラリ tyserv/sample/perl/tyserv.pl を用意
してます。使い方は tyserv/sample/perl 以下のスクリプトを参照して下さい。

各コマンドのトークンの区切り文字はタブ(0x09)です。

 ・ START_TRAN USER PASSWORD
    更新モードでトランザクションを開始します。先行するトランザクショ
    ンが有る場合はそれらが全て終了するまで待ちます。また、本トランザ
    クションの実行中は後から開始されたトランザクションは全て待たされ
    ます。本トランザクション内で更新系のコマンドが実行された場合はロ
    ールバックに備えてロールバックジャーナルが取得されます。
 ・ START_TRAN_NJ USER PASSWORD
    更新モードでトランザクションを開始します。 START_TRAN との違いは
    ロールバックジャーナルを取得しない点です。ロールバック機能が利用
    できない代わりに、更新スピードを速めることが出来ます。この点をよ
    く理解した上で利用して下さい。
 ・ START_TRANM USER PASSWORD
    参照モードでトランザクションを開始します。更新モードのトランザク
    ションが先行する場合に限り、それが終了するまで待ちます。また、本
    トランザクションの実行中は後から開始された更新モードのトランザク
    ションは全て待たされます。
 ・ GET RECNAME KEYNAME CONDITION KEYVALUE1 KEYVALUE2 ...
    キー値で検索条件を指定し、目的のレコードを取得します。レコードは
   
    ステータス1 ステータス2 項目名1=値1 項目名2=値2 ... 項目名n=値n
   
    の形式で返ります(perl等のスクリプト言語からの利用を念頭にこのよう
    な仕様にしました)。区切り文字はタブです。
   
    CONDITIONには以下の条件が指定できます
     □ EQ, == : キーの値が指定値に等しいレコードを検索します
     □ GE, >=, => : キーの値が指定値以上で直近のレコードを検索します
     □ GT, > : キーの値が指定値より大きく直近のレコードを検索します
 ・ GETNEXT RECNAME KEYNAME
    指定したキー項目の昇順に次のレコードを取得します。
 ・ PUT RECNAME MEMBER1=VALUE1 MEMBER2=VALUE2 ...
    レコードを挿入します。
 ・ UPDATE RECNAME PKEYVALUE1 PKEYVALUE2 ... MEMBER1=VALUE1 MEMBER2=
    VALUE2 ...
    主キーで特定したレコードの内容を更新します。
 ・ DELETE RECNAME PKEYVALUE1 PKEYVALUE2 ...
    主キーで特定したレコードを削除します。
 ・ ROLLBACK
    トランザクションの開始時点、コミットの実行時点のうち、近いほうの
    時点の状態にDBの内容を戻します。一般的にはロールバック実行時に排
    他制御を解除する実装が普通ですが、tyserv では排他制御の解除を行い
    ません。
 ・ COMMIT
    トランザクションを確定します。一般的にはコミット実行時に排他制御
    を解除する実装が普通ですが、tyserv では排他制御の解除を行いません。
 ・ ABORT_TRAN
    トランザクションの開始時点、コミットの実行時点のうち、近いほうの
    時点の状態にDBの内容を戻し、トランザクションを終了します。排他制
    御は解除されます。
 ・ END_TRAN
    トランザクションを確定し、終了します。排他制御の解除を行います。
 ・ SHUTDOWN USER PASSWORD
    tyserv を停止します。
 ・ SWAPRVJ USER PASSWORD
    リカバリジャーナルをスワップさせます。スワップ先のファイル名は、
    `実行時ディレクトリ/journal/rvj.dat.YYYYMMDD.HHMMSS' となります。

さらなる情報は tyserv/doc/*, tyserv/sample/* を参照して下さい。

tyserv への telnet でのアクセス例
=================================

$ telnet localhost 20000
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
start_tran      user    user                            <-Input
OK      TRANSACTION START                               <-Response
put     smp1    id=1111 name=Taro       salary=150000   <-Input
OK      INSERTED                                        <-Response
put     smp1    id=2222 name=Jiro       salary=200000   <-Input
OK      INSERTED                                        <-Response
put     smp1    id=3333 name=Goro       salary=250000   <-Input
OK      INSERTED                                        <-Response
get     smp1    pkey    eq      1111                    <-Input
OK      FOUND   id=1111 name=Taro       salary=150000   <-Response
getnext smp1    pkey                                    <-Input
OK      FOUND   id=2222 name=Jiro       salary=200000   <-Response
getnext smp1    pkey                                    <-Input
OK      FOUND   id=3333 name=Goro       salary=250000   <-Response
update  smp1    2222    name=Jirorin                    <-Input
OK      UPDATED                                         <-Response
get     smp1    pkey    eq      2222                    <-Input
OK      FOUND   id=2222 name=Jirorin    salary=250000   <-Response
delete  smp1    2222                                    <-Input
OK      DELETED                                         <-Response
get     smp1    pkey    eq      2222                    <-Input
NG      NOTFOUND                                        <-Response
rollback                                                <-Input
OK      ROLLBACKED                                      <-Response
get     smp1    pkey    eq      2222                    <-Input
OK      FOUND   id=2222 name=Jirorin    salary=250000   <-Response
end_tran                                                <-Input
OK      TRANSACTION END                                 <-Response
Connection closed by foreign host.

perl用アクセスライブラリ(tyserv.pl)利用例
=========================================

tyservへのアクセス部分だけに焦点をしぼったコーディング例ですのでエラ
ー対応のコーディングは一切省いています。御了承下さい。
#! /usr/bin/perl
#---------------------------------------------------------
# ソケット通信ライブラリ読み込み
use IO::Socket;
#
# tyservアクセスライブラリ読み込み
require 'tyserv.pl';
#---------------------------------------------------------
# ユーザ名設定
$user = "manager";
#
# パスワード設定
$passwd = "manager";
#
# ホスト名設定
$host = "localhost";
#
# ポート番号設定
$port = 20000;
#---------------------------------------------------------
# ソケットハンドル取得
$handle = IO::Socket::INET->new(Proto     => "tcp",
                                PeerAddr  => $host,
                                PeerPort  => $port);
#
# ソケットハンドルの自動フラッシュ設定
$handle->autoflush(1); # so output gets there right away
#---------------------------------------------------------
# 更新トランザクション開始
($sts1, $sts2) = &ty_start_tran($handle, $user, $passwd);
#---------------------------------------------------------
# レコード内容初期化
%rec = ();
#
# レコード内容設定
$rec{id} = "9999";
$rec{name} = "Mr. X";
$rec{salary} = 900000;
#
# レコード書き込み
($sts1, $sts2) = &ty_put($handle, "smp1", \%rec);
#---------------------------------------------------------
# レコード内容初期化
%rec = ();
#
# レコード読み込み
($sts1, $sts2, %rec) = &ty_get($handle, "smp1", "pkey", "eq", ["9999"]);
#---------------------------------------------------------
# レコード項目更新
$rec{salary} *= 10;
#
# レコード更新
($sts1, $sts2) = &ty_update($handle, "smp1", ["9999"], \%rec);
#---------------------------------------------------------
# レコード削除
($sts1, $sts2) = &ty_delete($handle, "smp1", ["9999"]);
#---------------------------------------------------------
# トランザクション終了
($sts1, $sts2) = &ty_end_tran($handle);
#---------------------------------------------------------
# プログラム終了
exit 0;

open-cobol用アクセスインターフェース(tycob.c)利用例
===================================================

tyservへのアクセス部分だけに焦点をしぼったコーディング例ですのでエラ
ー対応のコーディングは一切省いています。御了承下さい。
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      sample1.
       ENVIRONMENT      DIVISION.
      *------------------------------------------
      * 作業領域定義
      *------------------------------------------
       WORKING-STORAGE  SECTION.
      *------------------------------------------
      * 定数定義
      *------------------------------------------
       01 C-NULL        PIC X(1) VALUE LOW-VALUE.
       01 C-TAB         PIC X(1) VALUE X'09'.
      *------------------------------------------
      * ワーク定義
      *------------------------------------------
      *
      * sock_* 関係インターフェース項目
      *
       01 HOST.
          02 FILLER     PIC X(9) VALUE 'localhost'.
          02 FILLER     PIC X(1) VALUE LOW-VALUE.
       01 PORT.
          02 FILLER     PIC X(5) VALUE '20000'.
          02 FILLER     PIC X(1) VALUE LOW-VALUE.
       01 FD-SOCK.
          02 FILLER     PIC X(5) VALUE SPACE.
          02 FILLER     PIC X(1) VALUE LOW-VALUE.
       01 SEND-DATA.
          02 FILLER     PIC X(1024) VALUE SPACE.
          02 FILLER     PIC X(1) VALUE LOW-VALUE.
       01 RECV-DATA.
          02 FILLER     PIC X(1024) VALUE SPACE.
          02 FILLER     PIC X(1) VALUE LOW-VALUE.
      *
      * get_* 関係インターフェース項目
      *
       01 STAT1         PIC X(2) VALUE SPACE.
       01 STAT2         PIC X(1024) VALUE SPACE.
       01 G-ID          PIC X(4).
       01 G-NAME        PIC X(20).
       01 G-SALARY      PIC 9(7).
      *------------------------------------------
      * 処理開始
      *------------------------------------------
       PROCEDURE        DIVISION.
      *
       MAIN-EN.
      *
      * ソケットオープン
      *
         CALL 'sock_open' USING HOST PORT FD-SOCK.
      *
      * 更新モードトランザクション開始
      *
         INITIALIZE SEND-DATA RECV-DATA STAT1 STAT2.
         STRING 'start_tran' DELIMITED BY SIZE
                C-TAB DELIMITED BY SIZE
                'user' DELIMITED BY SIZE
                C-TAB DELIMITED BY SIZE
                'user' DELIMITED BY SIZE
                C-NULL DELIMITED BY SIZE
                INTO SEND-DATA.
         CALL 'sock_send_recv' USING FD-SOCK SEND-DATA RECV-DATA.
         CALL 'get_status' USING RECV-DATA STAT1 STAT2.
      *
      * 挿入
      *
         INITIALIZE SEND-DATA RECV-DATA STAT1 STAT2.
         STRING 'put' DELIMITED BY SIZE
                C-TAB DELIMITED BY SIZE
                'smp1' DELIMITED BY SIZE
                C-TAB DELIMITED BY SIZE
                'id=9999' DELIMITED BY SIZE
                C-TAB DELIMITED BY SIZE
                'name=Mr. X' DELIMITED BY SIZE
                C-TAB DELIMITED BY SIZE
                'salary=0900000' DELIMITED BY SIZE
                C-NULL DELIMITED BY SIZE
                INTO SEND-DATA.
         CALL 'sock_send_recv' USING FD-SOCK SEND-DATA RECV-DATA.
         CALL 'get_status' USING RECV-DATA STAT1 STAT2.
      *
      * 検索
      *
         INITIALIZE SEND-DATA RECV-DATA STAT1 STAT2.
         STRING 'get' DELIMITED BY SIZE
                C-TAB DELIMITED BY SIZE
                'smp1' DELIMITED BY SIZE
                C-TAB DELIMITED BY SIZE
                'pkey' DELIMITED BY SIZE
                C-TAB DELIMITED BY SIZE
                'eq' DELIMITED BY SIZE
                C-TAB DELIMITED BY SIZE
                '9999' DELIMITED BY SIZE
                C-NULL DELIMITED BY SIZE
                INTO SEND-DATA.
         CALL 'sock_send_recv' USING FD-SOCK SEND-DATA RECV-DATA.
         CALL 'get_status' USING RECV-DATA STAT1 STAT2.
      *
      * 項目(SALARY)を更新
      *
         INITIALIZE G-ID G-NAME G-SALARY.
         CALL 'get_value' USING RECV-DATA 'id' G-ID.
         CALL 'get_value' USING RECV-DATA 'name' G-NAME.
         CALL 'get_value' USING RECV-DATA 'salary' G-SALARY.
         COMPUTE G-SALARY = G-SALARY * 10.
      *
      * 更新
      *
         INITIALIZE SEND-DATA RECV-DATA STAT1 STAT2.
         STRING 'update' DELIMITED BY SIZE
                C-TAB DELIMITED BY SIZE
                'smp1' DELIMITED BY SIZE
                C-TAB DELIMITED BY SIZE
                G-ID DELIMITED BY SIZE
                C-TAB DELIMITED BY SIZE
                'salary=' DELIMITED BY SIZE
                G-SALARY DELIMITED BY SIZE
                C-NULL DELIMITED BY SIZE
                INTO SEND-DATA.
         CALL 'sock_send_recv' USING FD-SOCK SEND-DATA RECV-DATA.
         CALL 'get_status' USING RECV-DATA STAT1 STAT2.
      *
      * 削除
      *
         INITIALIZE SEND-DATA RECV-DATA STAT1 STAT2.
         STRING 'delete' DELIMITED BY SIZE
                C-TAB DELIMITED BY SIZE
                'smp1' DELIMITED BY SIZE
                C-TAB DELIMITED BY SIZE
                '9999' DELIMITED BY SIZE
                C-NULL DELIMITED BY SIZE
                INTO SEND-DATA.
         CALL 'sock_send_recv' USING FD-SOCK SEND-DATA RECV-DATA.
         CALL 'get_status' USING RECV-DATA STAT1 STAT2.
      *
      * トランザクション終了
      *
         INITIALIZE SEND-DATA RECV-DATA STAT1 STAT2.
         STRING 'end_tran' DELIMITED BY SIZE
                INTO SEND-DATA.
         CALL 'sock_send_recv' USING FD-SOCK SEND-DATA RECV-DATA.
         CALL 'get_status' USING RECV-DATA STAT1 STAT2.
      *
      * ソケットクローズ
      *
         CALL 'sock_close' USING FD-SOCK.
       MAIN-EX.
         STOP RUN.
      *------------------------------------------
      * 処理終了
      *------------------------------------------

プログラミングの注意点
======================

 ・ START_TRAN, START_TRAN_NJ, START_TRANM に始まり END_TRAN,
    ABORT_TRAN で終ること。
   
    END_TRAN, ABORT_TRAN を発行せずにクライアントを終了した場合は
    ABORT_TRAN 扱いとなります。
 ・ 共有参照アクセスを行う場合は START_TRANM で始めること。
 ・ START_TRAN* と END_TRAN, ABORT_TRAN の間はできる限り短く設計する
    こと。
 ・ 長時間処理は適当な間隔でEND_TRAN(もしくは ABORT_TRAN)を発行し、ト
    ランザクションを区切ること。
 ・ テーブルの項目に格納できるのは文字列のみです。また、文字列の中に
    タブを含めることは出来ません。

アクセス状態コード
==================

┌──┬─────────────────────────┐
│STS1│                       STS2                       │
├──┼─────────────────────────┤
│OK  │COMMITED                                          │
├──┼─────────────────────────┤
│OK  │COMMITED BUT RECOVERY JOURNAL OVERFLOW            │
├──┼─────────────────────────┤
│OK  │DELETED                                           │
├──┼─────────────────────────┤
│OK  │FOUND                                             │
├──┼─────────────────────────┤
│OK  │INSERTED                                          │
├──┼─────────────────────────┤
│OK  │NORMAL SHUTDOWN                                   │
├──┼─────────────────────────┤
│OK  │ROLLBACKED                                        │
├──┼─────────────────────────┤
│OK  │SWAPRVJ TO full_path_of_recovery_journal          │
├──┼─────────────────────────┤
│OK  │TRANSACTION ABORT, ROLLBACKED                     │
├──┼─────────────────────────┤
│OK  │TRANSACTION END                                   │
├──┼─────────────────────────┤
│OK  │TRANSACTION END BUT RECOVERY JOURNAL OVERFLOW     │
├──┼─────────────────────────┤
│OK  │TRANSACTION START                                 │
├──┼─────────────────────────┤
│OK  │UPDATED                                           │
├──┼─────────────────────────┤
│NG  │ACCESS DENIED(ip address)                         │
├──┼─────────────────────────┤
│NG  │CAN NOT OPEN DATABASE db_status=xxxx              │
├──┼─────────────────────────┤
│NG  │CAN NOT READ SOCKET                               │
├──┼─────────────────────────┤
│NG  │DUPLICATE                                         │
├──┼─────────────────────────┤
│NG  │NO RECOVERY JOURNAL                               │
├──┼─────────────────────────┤
│NG  │NO ROLLBACK JOURNAL                               │
├──┼─────────────────────────┤
│NG  │NOT GRANTED                                       │
├──┼─────────────────────────┤
│NG  │NOTFOUND                                          │
├──┼─────────────────────────┤
│NG  │RECOVERY JOURNAL OVERFLOW                         │
├──┼─────────────────────────┤
│NG  │REQUIRE START_TRAN OR START_TRAN_NJ OR START_TRANM│
├──┼─────────────────────────┤
│NG  │ROLLBACK JOURNAL OVERFLOW                         │
├──┼─────────────────────────┤
│NG  │SOCKET READ ERROR                                 │
├──┼─────────────────────────┤
│NG  │SOCKET READ ERROR, ROLLBACKED                     │
├──┼─────────────────────────┤
│NG  │STATUS=xxxx                                       │
├──┼─────────────────────────┤
│NG  │UNKNOWN CONDITION                                 │
├──┼─────────────────────────┤
│NG  │UNKNOWN FUNCTION                                  │
├──┼─────────────────────────┤
│NG  │UNKNOWN ITEM                                      │
├──┼─────────────────────────┤
│NG  │UNKNOWN KEY                                       │
├──┼─────────────────────────┤
│NG  │UNKNOWN RECORD                                    │
└──┴─────────────────────────┘

データベース定義(typhoondb.ddl)の掟
===================================

 1 database typhoondb {
 2     data file "smp1.dat"   contains  smp1;
 3     key  file "smp1.pk"    contains  smp1.smp1_pkey;
 4     key  file "smp1.s1"    contains  smp1.smp1_skey1;
 5     record smp1 {
 6         char id[4 + 1];
 7         char name[20 + 1];
 8         char salary[7 + 1];
 9         primary   key smp1_pkey  { id asc };
10         alternate key smp1_skey1 { name asc, id asc };
11     }
12 }

解説

 1 データベース定義の開始文
   database データベース名 {

   o データベース名は「typhoondb」に限る

 2 データ格納ファイル指定文
   data file "ファイル名" contains テーブル名;

   o ファイル名は「テーブル名.dat」に限る

 3 主キー格納ファイル指定文
   key  file "ファイル名" contains テーブル名.テーブル名_pkey;

   o 主キーはテーブルに1個のみ存在できる
   o ファイル名は「テーブル名.pk」に限る

 4 副キー格納ファイル指定文
   key  file "ファイル名" contains テーブル名.テーブル名_skey連番;

   o 副キーはテーブルに複数個存在できる
   o ファイル名は「テーブル名.s連番」に限る
   o 連番は1から順に副キー毎に符番する

 5 テーブル定義開始文
   record テーブル名 {

 6 項目定義文
 7 項目定義文
 8 項目定義文
   char 項目名[項目長 + 1];

   o 属性は「char」のみ指定できる

 9 主キー定義文
   primary key テーブル名_pkey { 項目名 並び順[, 項目名 並び順] ... };

   o 主キーはテーブルに1個のみ存在できる
   o 主キーはレコードをユニークに特定できる項目で構成しなければならない
   o 並び順は昇順の場合は「asc」、降順の場合は「desc」

10 副キー定義文
   alternate key テーブル名_skey連番 { 項目名 並び順[, 項目名 並び順] ... };

   o 副キーはテーブルに複数個存在できる
   o 副キーは重複を許す。但し、重複キーを持つレコードの並び順が不定なのは
    不安なので(^^;、主キーの構成項目を末尾に追加することを推奨します
   o 連番は1から順に副キー毎に符番する

11 テーブル定義の終了
   }

12 データベース定義の終了
   }

インポートスクリプト(tyimp)の利用例
===================================

 ・ tyimp の読み込む定義ファイルを作成する
     □ $ cd /home/tyserv/typhoon/dbd
     □ $ tyimport -g typhoondb
       
        tyimport(typhoon-1.11.0に付属のコマンド)が作成する定義ファイ
        ル(typhoondb.imp)にはデータベース(typhoondb)に含まれる全ての
        テーブルのインポート定義が含まれています。
     □ $ cp typhoondb.imp typhoondb.smp1.imp
     □ $ vi typhoondb.smp1.imp
       
        typhoondb.imp を typhoondb.テーブル名.imp にコピーし、該当テ
        ーブルに関する定義のみを残すように編集します。tyimp は
        typhoondb.テーブル名.imp を定義ファイルとして読み込みます。
 ・ 実行する
     □ $ tyimp typhoondb smp1 < foo.txt
       
        foo.txt(各項目をタブで区切ったCSVファイル)を読み込み、データ
        ベース(typhoondb)に含まれるテーブル(smp1)にインポートを行う。
        foo.txtの各行は必ずインポート定義ファイル(typhoondb.smp1.imp)
        に定義されている項目と同じ数のフィールドを含んでいなければな
        らない。

エクスポートスクリプト(tyexp)の利用例
=====================================

 ・ tyexp の読み込む定義ファイルを作成する
     □ cd /home/tyserv/typhoon/dbd
     □ tyexport -g typhoondb
       
        tyexport(typhoon-1.11.0に付属のコマンド)が作成する定義ファイ
        ル(typhoondb.exp)にはデータベース(typhoondb)に含まれる全ての
        テーブルのエクスポート定義が含まれています。
     □ $ cp typhoondb.exp typhoondb.smp1.exp
     □ $ vi typhoondb.smp1.exp
       
        typhoondb.exp を typhoondb.テーブル名.exp にコピーし、該当テ
        ーブルに関する定義のみを残すように編集します。tyexp は
        typhoondb.テーブル名.exp を定義ファイルとして読み込みます。
 ・ 実行する
     □ $ tyexp typhoondb smp1 > foo.txt
       
        データベース(typhoondb)に含まれるテーブル(smp1)のデータを
        foo.txt(各項目をタブで区切ったCSVファイル)に出力します。

tyserv 再生成
=============

 ・ データベース定義(typhoondb.ddl)を更新した場合、typhoondb.dbd,
    tyserv, tyrecover, tysearch を再生成する必要が有ります。
     1. $ dbdgen typhoondb
     2. $ kill -TERM tyservのpid
     3. $ cd /home/tyserv/tyserv/src
     5. $ make src
     6. $ make
     7. $ make install
     8. $ /etc/rc.d/rc.tyserv -d /home/tyserv/rundir1
 ・ データベース定義(typhoondb.ddl)を更新した場合(テーブルの追加等)、
    typhoondb.dbd, tyserv, tyrecover, tysearch を再生成する必要が有ります。
     1. $ dbdgen typhoondb
     2. $ kill -TERM tyservのpid
     3. $ cd /home/tyserv/tyserv/src
     4. Makefile を編集し `OBJS' マクロを修正します。
       
        ex. テーブル `smp1' が有る場合 OBJS は以下のように定義されて
        います。
                OBJS = tyserv_smp1.o
          
        そこにテーブル `smp2' を追加する場合 OBJS の定義は以下のよう
        になります。
                OBJS = tyserv_smp1.o \
                       tyserv_smp2.o
          
       
        オブジェクトの名称は "tyserv_" + table_name + ".o" でないとい
        けません。
     6. $ make src
     7. $ make
     8. $ make install
     9. $ /etc/rc.d/rc.tyserv -d /home/tyserv/rundir1

起動スクリプト(rc.tyserv)
=========================

 ・ usage : rc.tyserv [-w|-c] [-d 実行時ディレクトリ]
     □ -w : warm起動をします。
         ☆ ロールバックジャーナル(実行時ディレクトリ/journal/
            rbj.dat) が存在する場合は起動を中断します。
     □ -c : cold起動をします。
         ☆ 起動時点のロールバックジャーナルの内容は破棄され、ロール
            バックは行われません。
         ☆ 起動時点のリカバリジャーナルの内容は破棄され、先頭から書
            き出されます。
     □ -w, -c 指定無し : デフォルト
         ☆ ロールバックジャーナル(実行時ディレクトリ/journal/
            rbj.dat) が存在する場合は自動的にロールバック処理が実行さ
            れます。
         ☆ リカバリジャーナル(実行時ディレクトリ/journal/rvj.dat)は
            起動時点の内容に追加出力されます。
     □ -d 実行時ディレクトリ : 省略時は /home/tyserv/rundir1

サーバは自動的にバックグラウンドで実行されます。

データベース復旧ツール(tyrecover.sh)
====================================

 ・ usage : tyrecover.sh [-d 実行時ディレクトリ] [-s|--stdin] [-v|--verbose] [-f|--force]
   
     □ -d 実行時ディレクトリ :
        実行時ディレクトリ/journal/rvj.dat からデータベースの復旧を行
        う。実行時ディレクトリ未指定時は ${HOME}/rundir1/journal/
        rvj.datから復旧を行う。
     □ -s, --stdin : リカバリジャーナルを標準入力から読む
     □ -v, --verbose : おしゃべりモード
     □ -f, --force : 強制的にリカバリジャーナルの最終までデータ復旧する
                      デフォルトは最終のcommit又はend_tranまでデータ復旧する
 ・ 皆さんはディスクのバックアップは取っておられますか？。取ってない
    という方も大勢おられると思います。また取っているとしても毎日取る
    なんて方は極まれなんではないでしょうか。
   
    でもこれが業務システムの利用するデータベースとなると、最低でも１
    日１回のバックアップが必要でしょう。
   
    しかし１日１回のバックアップではディスククラッシュ等のタイミング
    によって最悪２４時間前の状態戻すのが精いっぱいで、その後の入力デ
    ータに関しては入力伝票をかき集めて、もう一度手作業で入力しなおさ
    なければなりません。業務システムに関して言えばこれは
   
                                 致命的                              
   
    です。そこで tyserv では直近のバックアップ + リカバリジャーナルを
    利用してクラッシュの直前の状態にデータベースを復元するツール
    tyrecover.sh を用意しています。
   
    tyrecover.sh の利用はバックアップのタイミングと密接に関係してきま
    す。以下にバックアップ運用例と障害時の復旧例を示します。
 ・ 通常の運用タイムスケジュール例(１日に１回バックアップの場合)
           00:00           23:00  00:00            23:00 00:00
      tyserv +---------------+      +----------------+     +---...
             cold起動        停止   cold起動         停止
    
      backup                 +------+                +-----+
                             開始   終了             開始  終了
      
   
    この例では毎日23:00〜00:00の１時間でバックアップを取っています。
 ・ 通常の運用タイムスケジュール例(３日に１回バックアップ＆システムの
    稼働は9-18時に限る場合)
             09   18     09   18    09   18    09   18    09   18
      tyserv +----+      +----+     +----+     +----+     +----+...
           cold  停止   warm 停止 warm  停止 cold  停止 warm  停止
           起動         起動      起動       起動       起動
      backup                             +-+
      
   
    この例の場合バックアップを取った直後の起動に限り、cold起動してる
    点に気をつけて下さい。また、毎回の停止時にリカバリジャーナルだけ
    でもバックアップしておくようにするとさらに安全です。さらにジャー
    ナルだけ別パーティションにするのも安全です。ディスククラッシュと
    同時にリカバリジャーナルまでふっ飛ぶと、どうしようもないですから
    (^^;。
 ・ 障害発生時の対応
                  計画停止 起動   ダウン      復旧 計画停止 起動
      tyserv    ...---+     +-------* - - - - - +------+     +----...
      backup          +-----+       |           |      +-----+
                                 障害発生       |
                                    |           |
      restore                       +-----+     |
      recover                             +-----+
      
     □ backup例 :
        $ cd /home/tyserv/typhoon/data
        $ tar cvzf /dev/st0 .
     □ restore例 :
        $ cd /home/tyserv/typhoon/data
        $ tar xvzpf /dev/st0
     □ recover例 :
        $ tyrecover.sh -d /home/tyserv/rundir1
 ・ バックアップ運用のまとめ
     □ 停止後にバックアップを取った場合は次回の起動はcold起動
     □ 停止後にバックアップを取らなかった場合は次回の起動はwarm起動
     □ リカバリジャーナルは毎回停止時にバックアップ取るのが安全
 ・ リカバリ運用のまとめ
     □ バックアップからデータベースを元に戻す
     □ tyrecover.sh を実行し、クラッシュ直前の状態まで復旧する

マルチサーバ構成
================

tyservは排他の単位がデータベースなので、排他モードのトランザクション
実行時に全てのテーブルに排他がかかります。これは、一つの tyserv プロ
セスが全てのクライアントからの更新トランザクションを受け付け、処理す
ることで共有そのものを避ける方法で排他制御を行っている(というか行わず
にすましてるというか...)為にしかたのないことです(^^;。

そこでtyserv-2.3ではデータベースに含まれるテーブルを幾つかのグループ
に分けて、そのグループ毎に別々のサーバを起動することで排他の粒度を細
かくできるように拡張を行いました。

 ・ rc.tyserv(サーバ起動スクリプト)の拡張
    サーバ毎に実行環境を指定するために「-d 実行ディレクトリ」オプショ
    ンが追加されました。「実行ディレクトリ」はサーバ毎に個別に指定す
    る必要があります。「実行ディレクトリ」には「conf」「etc」「
    journal」ディレクトリ、「conf/tyserv.conf」ファイルが必要です。
 ・ tyserv.confの追加パラメータ
    マルチサーバ構成で運用する場合は各サーバ毎に「tyserv.conf」を用意
    し、そのサーバでアクセスするテーブルを指定する必要があります。そ
    のために「TABLE_LIST=テーブル名」パラメータを指定します。アクセス
    するテーブルの数だけこのパラメータを繰り返し指定して下さい。
   
    「TABLE_LIST=テーブル名」が存在しない場合、従来と同様に全てのテー
    ブルにアクセスできます。
   
    注意する点として、別の「tyserv.conf」に同じテーブルを指定する事は
    可能ですが、その場合そのテーブルに対する更新トランザクションのア
    トミック性が保証されなくなりますので決してそのような指定は行わな
    いで下さい。
   
    また「SOCKET_PORT=ポート番号」は各「tyserv.conf」でユニークになる
    ように設定して下さい。
 ・ プログラミング上の注意点
    マルチサーバ構成で運用することにより、一つのアプリケーションから
    複数のサーバに対して START_TRAN, START_TRAN_NJ, START_TRANM コマ
    ンドを発行する可能性が生じますが、その場合、同時に実行されている
    別のアプリケーションとの間でデッドロックが発生する可能性がありま
    す。残念な事ですがtyservにはクライアントにデッドロックの検出を伝
    える機能がありません(^^;。そこで、アプリケーションの作成者はあら
    かじめデッドロックを起こさないようにアプリケーションを設計する必
    要があります。その方法とは(同時に動き得る)全てのアプリケーション
    から発行する START_TRAN, START_TRAN_NJ, START_TRANM コマンドの順
    序を統一する事です。たとえば、(IPアドレス,)ポート番号の小さいサー
    バから順に発行していく等の方法が考えられます。
   
    ...とはいえ、複数の人間で開発してるとこういうプロジェクトルールが
    守られないケースも発生して来ますよね(^^;。そこで、とりあえずです
    がサンプルディレクトリの tyserv.pl に複数トランザクションを一括統
    一した順序で扱うための関数を追加しました。いかにも場当たり的な物
    ですが perl でアプリケーションを開発される場合には御活用下さいま
    せ。
     □ @tran_param = (port, handle, user, password, mode,
                       以上繰り返し )
     □ ty_start_trans(@tran_param)
     □ ty_end_trans(@tran_param)
     □ ty_abort_trans(@tran_param)
     □ ty_commits(@tran_param)
     □ ty_rollbacks(@tran_param)
 ・ サンプルスクリプトの動かし方(perl版)
     □ $ cd /home/tyserv
     □ $ cp -fr tyserv-2.3/rundir2 ~/
     □ $ /etc/rc.d/rc.tyserv -d /home/tyserv/rundir2
     □ $ cd /home/tyserv/tyserv/sample/perl
     □ $ ./sample3.pl localhost 20000 update 20001 update

tysearch(検索コマンド)実行例
============================

シェルから検索するためのコマンドを提供します。本コマンドは直接データベー
スをアクセスするので、サーバが起動していなくても使用できますが、当然ト
ランザクション管理の範囲外で動作しますので、その点御理解頂いた上で利用
して下さい。

$ tysearch -h  <-- ヘルプの表示
usage : tysearch table start_count rec_count key_name key_value ...
environment value : TYPHOON_DIR

$ tysearch smp1 1 3 pkey 0003  <-- テーブルsmp1のpkeyが0003以上のレコー
                                   ドに位置付け、1件目から3レコードを
                                   stdoutに出力する

OK      FOUND   id=0003 name=Kiyoshi Sakamoto   salary=0510000
OK      FOUND   id=0004 name=Masaharu Sawada    salary=0470000
OK      FOUND   id=0005 name=Masahiko Ito       salary=0300000
$

Cygwin 対応
===========

typhoon-1.11.0.patch の代わりに typhoon-1.11.0.cygwin.patch を利用する
事でMS-Windows上のCygwin環境でtyservを利用することが出来ます。
その際には、tyservのmakeにはMakefile.cygwinを利用して下さい。
また、本パッチを当てることでtyphoon-1.11.0が本来持ってる排他制御機能は
無効になるので注意して下さい。

特に、既にtyphoon-1.11.0を利用したアプリケーションを作成されてる場合は
本パッチの利用は避けられたほうが良いでしょう。

FreeBSD 対応
============

typhoon-1.11.0.patch の代わりに typhoon-1.11.0.FreeBSD.patch を利用する
事でFreeBSD環境でtyservを利用することが出来ます。その際には、tyservの
Makefile中のLIBSマクロに -lcompat を追加してください。また、tacコマンド
がインストールされていない場合は tyrollback.sh スクリプト中の TACシェル
変数を tac.sh を使うように修正してください。

TODO & BUGS
===========

 ・ /home/tyserv/tyserv/etc/passwd 中のパスワードは暗号化されてません
    。パーミッションに注意してください。

typhoon-1.11.0の情報
====================

 ・ typhoon-1.11.0/man/*
 ・ typhoon-1.11.0/examples/*
 ・ http://users.footprints.net/~kaz/typhoon.html
